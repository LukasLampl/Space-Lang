#
THIS IS THE GRAMMAR DEFINITION OF THE SPACE LANGUAGE.
#

[DIGIT]                 ::= "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" $_
[LETTER]                ::= "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z" / "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z" $_
[RATIONAL_OPERATORS]    ::= "==" / "<=" / ">=" / "!=" / "<" / ">" $_
[ARITHMETIC_OPERATOR]   ::= "+" / "-" / "*" / "%" / "/" $_
[ASSIGNMENT_OPERATORS]  ::= "+=" / "-=" / "/=" / "*=" $_
[INCREMENT_OPERATOR]    ::= "++" $_
[DECREMENT_OPERATOR]    ::= "--" $_
[UNDERSCORE]            ::= "_" $_
[BOOL]                  ::= "true" / "false" $_
[MODIFIER]              ::= "global" / "secure" / "private" $_
[QUOTE]                 ::= \" $_
[LOGIC_OPERATOR]        ::= "and" / "or" / "!" $_

#
    _ = End of "rule"
    $ = End of "x'th definition"
    () = Group
    * = can be repeated or can be there many times even 0 times
    / = "or"
#

### IDENTIFIER ###
<IDENTIFIER>:
    	| *[LETTER] $
        | *[DIGIT] $
        | *[UNDERSCORE] $_

### EXPRESSION ###
<EXPRESSION> ::= *<TERM> $
             ::  [LOGIC_OPERATOR] $
             ::  <EXPRESSION> -> [ARITHMETIC_OPERATOR] -> <TERM> $
             ::  <IDENTIFIER> -> [INCREMENT_OPERATOR] / [DECREMENT_OPERATOR] $_

### ATOM ###
<ATOM>:
    | *<STRING> / *<IDENTIFIER> / *"(" / *")" $_

### TERM ###
<TERM> ::= <IDENTIFIER> $
       ::  <FUNCTION_CALL> $
       ::  <ATOM> -> [ARITHMETIC_OPERATOR] -> <ATOM> $
       ::  <ATOM> -> [ASSIGNMENT_OPERATORS] -> <ATOM> $_

### STRING ###
<STRING>:
    | [QUOTE] -> **\{[QUOTE]} -> [QUOTE] $_         #**\{[QUOTE]} = Everything allowed except of [QUOTE]#

### ASSIGNMENT ###
<ASSIGNMENT> ::= "=" -> *<EXPRESSION> $
             ::  "=" -> <STRING> $
             ::  "=" -> <IDENTIFIER> $
             ::  "=" -> [BOOL] $_

### STATEMENT ###
<STATEMENT> ::= *(<IDENTIFIER> / <TERM>) -> "=" -> *(<IDENTIFIER> / <TERM> / <STRING>) $
            ::  *<ATOM> -> [ARITHMETIC_OPERATOR] -> *<ATOM> $_

### ARRAY ELEMENT ###
<ARRAY_ELEMENT> ::= [SQUARE_BRACKET] -> <EXPRESSION> -> [SQUARE_BRACKET] $_

### SUMMON ###
<VARIABLE> ::= "var" -> <IDENTIFIER> -> <ASSIGNMENT> -> ";" $
           ::  "var" -> *(<IDENTIFIER> -> ",") -> *<ASSIGNMENT> -> ";" $
           ::  "var" -> <IDENTIFIER> -> ";" $
           ::  "var" -> *(<IDENTIFIER> -> ",") -> ";" $
           ::  "var" -> <IDENTIFIER> -> <ARRAY_ELEMENT> -> ";" $
           ::  "var" -> <IDENTIFIER> -> <ARRAY_ELEMENT> -> "=" -> *[BRACE] -> *<EXPRESSION> -> *[BRACE] -> ";" $
           ::  "var" -> <IDENTIFIER> -> "=" -> *<EXPRESSION> -> "?" -> <IDENTIFIER> -> ":" -> <IDENTIFIER> -> ";" $
           ::  "const" -> <IDENTIFIER> -> ";" $_

### CLASS CALL ###
<CLASS_CALL> ::= <IDENTIFIER> -> <IDENTIFIER> "=" -> "new" -> <FUNCTION_CALL> -> "{" -> <RUNABLE -> "}" $
             ::  <IDENTIFIER> -> <IDENTIFIER> -> "=" -> <IDENTIFIER> -> <ARRAY_ELEMENT> -> ";" $_

### FUNCTION ###
<FUNCTION>:
    | "function" -> <FUNCTION_CALL> -> "{" -> <RUNABLE -> "}" $
    | [MODIFIER] -> "function" -> <FUNCTION_CALL> -> "{" -> <RUNABLE -> "}" $
    | "function" -> <IDENTIFIER> -> "(" -> (<IDENTIFIER> -> ASSIGNMENT) -> ")" -> "{" -> <RUNABLE -> "}" $
    | [MODIFIER] -> "function" -> <IDENTIFIER> -> "(" -> (<IDENTIFIER> -> ASSIGNMENT) -> ")" -> "{" -> <RUNABLE -> "}" $_

### FUNCTION CALL ###
<FUNCTION_CALL>:
    | <IDENTIFIER> -> "(" -> <PARAMETER> -> ")" -> ";" $_

### PARAMETER ###
<PARAMETER>:
    | <ATOM> $
    | *(<ATOM> -> ",") $_
    | *(*("*") -> <ATOM> -> ",") $
    | *("&" -> <ATOM> -> ",") $
    | *("&" -> "(" -> <ATOM> -> ")" -> ",") $_

### IF ###
<IF> ::= "if" -> [BRACKET] -> *<EXPRESSION> -> [BRACKET] -> [BRACE] -> <RUNABLE> -> [BRACE] -> *("else" -> "if" -> [BRACKET] -> *<EXPRESSION> -> [BRACKET] -> [BRACE] -> <RUNABLE> -> [BRACE]) -> *("else" -> [BRACKET] -> *<EXPRESSION> -> [BRACKET] -> [BRACE] -> <RUNABLE> -> [BRACE]) $_

### WHILE ###
<WHILE> ::= "while" -> [BRACKET] -> *<EXPRESSION> -> [BRACKET] -> [BRACE] -> <RUNABLE> -> [BRACE] $_

### DO ###
<DO> ::= "do" -> [BRACE] -> <RUNABLE> -> [BRACE] -> "while" -> [BRACKET] -> *<EXPRESSION> -> [BRACKET] $_

### TRY ###
<TRY>:
    | "try" -> [BRACE] -> <RUNABLE> -> [BRACE] -> <CATCH> $_

### CATCH ###
<CATCH>:
    | "catch" -> "(" -> *<IDENTIFIER> ")" -> "{" -> <RUNABLE> -> "}" $_

### FOR ###
<FOR> ::= "for" -> [BRACKET] -> <TERM> -> ";" -> <EXPRESSION> -> ";" -> <EXPRESSION> -> [BRACKET] -> [BRACE] -> <RUNABLE> -> [BRACE] $_

### CHECK ###
<CHECK>:
    | "check" -> [BRACKET] -> <IDENTIFIER> -> [BRACKET] -> [BRACE] -> *<IS> -> [BRACE] $_

### IS ###
<IS>:
    | "is" -> <EXPRESSION> -> ":" -> <RUNABLE> $_

### INSERT ###
<INSERT> ::= "insert" -> [QUOTE] -> *<IDENTIFIER> -> [QUOTE] $_

### CLASS ###
<CLASS> ::= "class" -> <FUNCTION_CALL> -> "=>" -> [BRACE] -> <RUNABLE> -> [BRACE] $
        ::  "class" -> <FUNCTION_CALL> -> "with" -> *(<IDENTIFIER> -> ",") -> "=>" -> [BRACE] -> <RUNABLE> -> [BRACE] $_

### ENUM ###
<ENUM> ::= "enum" -> <IDENTIFIER> -> [BRACE] -> *(<IDENTIFIER> -> *":" -> *<EXPRESSION>) -> [BRACE] $_

### RUNABLE ###
<RUNABLE> ::= *<FOR> / *<WHILE> / *<STATEMENT> / *<FUNCTION_CALL> / *<CHECK> / *<TRY> / *<DO> / *<IF> / *<FUNCTION> / *<VARIABLE> / *<CLASS_CALL> / *<CLASS> $_

### EXPORT ###
<EXPORT> ::= "export" -> <IDENTIFIER> -> ";" $_