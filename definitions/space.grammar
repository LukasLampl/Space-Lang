/////////////////////////////////////////////////////////////
///////////////////////    LICENSE    ///////////////////////
/////////////////////////////////////////////////////////////

The SPACE-Language compiler compiles an input file into a runnable program.
Copyright (C) 2023  Lukas Nian En Lampl

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////    THIS IS THE GRAMMAR DEFINITION OF THE SPACE LANGUAGE.    ////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[DIGIT]                 : "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9"
[LETTER]                : "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z" / "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z"
[RATIONAL_OPERATORS]    : "==" / "<=" / ">=" / "!=" / "<" / ">"
[ARITHMETIC_OPERATOR]   : "+" / "-" / "*" / "%" / "/"
[ASSIGNMENT_OPERATORS]  : "+=" / "-=" / "/=" / "*="
[INCREMENT_OPERATOR]    : "++"
[DECREMENT_OPERATOR]    : "--"
[UNDERSCORE]            : "_"
[BOOL]                  : "true" / "false"
[MODIFIER]              : "global" / "secure" / "private"
[QUOTE]                 : \"
[LOGIC_OPERATOR]        : "and" / "or" / "!"

#
    () = Group
    * = can be repeated or can be there many times even 0 times
    / = "or"
#

### IDENTIFIER ###
<IDENTIFIER>:
    	| ([LETTER] / [UNDERSCORE]) -> (*[UNDERSCORE] / *[DIGIT] / *[LETTER])

### POINTER IDENTIFIER ###
<POINTER_IDENTIFIER>:
    | <IDENTIFIER> -> *("." -> <IDENTIFIER> / <FUNCTION_CALL>)

### EXPRESSION ###
<EXPRESSION>:
    | <TERM>
    | <IDENTIFIER> -> <ASSIGNMENT>
    | <IDENTIFIER> -> ([INCREMENT_OPERATOR] / [DECREMENT_OPERATOR])

### POINTER POINTING TO VALUE ###
<POINTER_POINTING_TO_VALUE>:
    | "*" -> <IDENTIFIER>

### POINTER ###
<POINTER>:
    | *"*" -> <IDENTIFIER>

### REFERENCE ###
<REFERENCE>:
    | "&" -> <IDENTIFIER> 
    | "&" -> "(" -> "*" -> <IDENTIFIER> -> ")"

### TERM ###
<TERM>:
    | <IDENTIFIER>
    | <FUNCTION_CALL>
    | (<IDENTIFIER> / *[DIGIT] / *"(" / ")") -> [ARITHMETIC_OPERATOR] -> (<IDENTIFIER> / *[DIGIT] / *"(" / ")")

### STRING ###
<STRING>:
    | [QUOTE] -> **\{[QUOTE]} -> [QUOTE]       #**\{[QUOTE]} = Everything allowed except of [QUOTE]#

### ASSIGNMENT ###
<ASSIGNMENT>:
    | "=" -> <TERM>
    | "=" -> <STRING>
    | "=" -> <IDENTIFIER>
    | "=" -> [BOOL]

### ARRAY ELEMENT ###
<ARRAY_ELEMENT>:
    | "[" -> <EXPRESSION> -> "]"
    | "[" -> "]"

### VARIABLE ###
<VARIABLE>:
    | "var" -> <IDENTIFIER> -> <ASSIGNMENT> -> ";"
    | "var" -> <PARAMETER> -> <ASSIGNMENT> -> ";"
    | "var" -> <IDENTIFIER> -> ";"
    | "var" -> <PARAMETER> -> ";"
    | "var" -> <IDENTIFIER> -> *<ARRAY_ELEMENT> -> ";"
    | "var" -> <IDENTIFIER> -> *<ARRAY_ELEMENT> -> "=" -> *"{" -> *<EXPRESSION> -> *"}" -> ";"
    | "var" -> <IDENTIFIER> -> "=" -> *<EXPRESSION> -> "?" -> <IDENTIFIER> -> ":" -> <IDENTIFIER> -> ";"
    | "const" -> <IDENTIFIER> -> <ASSIGNMENT> -> ";" _

### CLASS INSTANCE ###
<CLASS_INSTANCE>:
    | <IDENTIFIER> -> <IDENTIFIER> "=" -> "new" -> <FUNCTION_CALL> -> ";"
    | <IDENTIFIER> -> <IDENTIFIER> -> "=" -> "new" -> <IDENTIFIER> -> <ARRAY_ELEMENT> -> ";"

### FUNCTION ###
<FUNCTION>:
    | "function" -> <FUNCTION_CALL> -> "{" -> <RUNNABLE -> "}"
    | [MODIFIER] -> "function" -> <FUNCTION_CALL> -> "{" -> <RUNNABLE -> "}"

### FUNCTION CALL ###
<FUNCTION_CALL>:
    | <IDENTIFIER> -> "(" -> <PARAMETER> -> ")"

### PARAMETER ###
<PARAMETER>:
    | <IDENTIFIER> 
    | <FUNCTION_CALL>
    | <IDENTIFIER> -> <ASSIGNMENT>
    | *(<IDENTIFIER> -> ",")
    | *((<POINTER> / <IDENTIFIER) -> ",")
    | *((<REFERENCE> / <IDENTIFIER>) -> ",")

### IF ###
<IF>:
    | "if" -> "(" -> <CONDITION> -> ")" -> "{" -> <RUNNABLE> -> "}"
    | "if" -> "(" -> <CONDITION> -> ")" -> "{" -> <RUNNABLE> -> "}" -> <ELSE>
    | "if" -> "(" -> <CONDITION> -> ")" -> "{" -> <RUNNABLE> -> "}" -> *<ELSE_IF>
    | "if" -> "(" -> <CONDITION> -> ")" -> "{" -> <RUNNABLE> -> "}" -> *<ELSE_IF> -> <ELSE>


### ELSE IF ###
<ELSE_IF>:
    | "else" -> <IF>

### ELSE ###
<ELSE>:
    | "else" -> "{" -> <RUNNABLE> -> "}"

### WHILE ###
<WHILE>:
    | <WHILE_CONDITION> -> <RUNNABLE>

### DO ###
<DO>:
    | "do" -> <RUNNABLE> -> <WHILE_CONDITION> -> ";"

### WHILE CONDITION ###
<WHILE_CONDITION>:
    | "while" -> "(" -> <CONDITION> -> ")"

### TRY ###
<TRY>:
    | "try" -> <RUNNABLE> -> <CATCH>

### CATCH ###
<CATCH>:
    | "catch" -> "(" -> *<IDENTIFIER> -> ")" -> <RUNNABLE>

### FOR ###
<FOR>:
    | "for" -> "(" -> <VARIABLE> ";" -> <CONDITION> -> ";" -> <TERM> -> ")" -> <RUNNABLE>

### CHECK ###
<CHECK>:
    | "check" -> [BRACKET] -> <IDENTIFIER> -> [BRACKET] -> [BRACE] -> *<IS> -> [BRACE]

### IS ###
<IS>:
    | "is" -> (<IDENTIFIER> / <DIGIT>) -> ":" -> <RUNNABLE>

### INCLUDE ###
<INCLUDE>:
    | "include" -> <STRING> -> ";"

### CLASS ###
<CLASS>:
    | "class" -> <FUNCTION_CALL> -> "=>" -> "{" -> <RUNNABLE> -> "}"
    | "class" -> <FUNCTION_CALL> -> <WITH_STATEMENT> -> "=>" -> "{" -> <RUNNABLE> -> "}"

### CLASS OBJECT ACCESS ###
<CLASS_OBJECT_ACCESS>:
    | <IDENTIFIER> -> "->" -> <FUNCTION_CALL>
    | *(<IDENTIFIER> -> ".") -> "->" -> <IDENTIFIER>

### WITH STATEMENT ###
<WITH_STATEMENT>:
    | "with" -> <PARAMETER>

### ENUM ###
<ENUM>:
    | "enum" -> <IDENTIFIER> -> "{" -> *<ENUMERATOR> -> "}" -> ";"

### ENUMERATOR ###
<ENUMERATOR>:
    | (<IDENTIFIER> -> ",") 
    | *(<IDENTIFIER> -> *(":" -> <IDENTIFIER> -> ","))

### BREAK ###
<BREAK>:
    | "break" -> ";"

### RETURN ###
<RETURN>:
    | "return" -> (<TERM> / <IDENTIFIER>) -> ";"

### RUNNABLE ###
<RUNNABLE>:
    | *<FOR> / *<WHILE> / *<FUNCTION_CALL> / *<CHECK> / *<TRY> / *<DO> / *<IF> / *<FUNCTION> / *<VARIABLE> / *<CLASS_CALL> / *<CLASS> / <RETURN> / *<CLASS_OBJECT_ACCESS>

### EXPORT ###
<EXPORT>:
    | "export" -> <STRING> -> ";"
