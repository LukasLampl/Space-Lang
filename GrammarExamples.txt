/////////////////////////////////////////////////////////////
///////////////////////    LICENSE    ///////////////////////
/////////////////////////////////////////////////////////////
/*
The SPACE-Language compiler compiles an input file into a runnable program.
Copyright (C) 2024  Lukas Nian En Lampl

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

### VARIABLES ###
var myNum = 10;
var 2DArray[5][10] = {{10}};
var 1DArray[4] = {1, 2, 3, 4};
const myConstant = 15;
var conditional = (a < 10) ? a : b;
var obj = new Object();

var:int a = 10;
var:long typed2DArray[5][10] = {{10}};
var:double typedAss = (a < 10) ? a : b;
var:Object typedObj = new Object();

### FUNCTION ###
function test(param1, param2) {}
function test(*param1, param2) {}
function:int add(num1, num2) {}
function:String greet() {}
global function test(param1, param2) {}
global function test(param1, *param2) {}

function:int add(num1:int, num2:int) {}
function print(text:String) {}
function:double getPi() {}

### IF ###
if (a < 10 and b == 20 or c >= 30) {
} else if (c < 10 and b > 30) {
} else {}

### WHILE ###
while (a < 10 and b == 20) {}

### DO ###
do {} while (a < 10 and b == 20);

### TRY ###
try {} catch (Exception e) {}

### FOR ###
for (var i = 0; i < 5; i++) {}
for (var:int i = 0; i < 5; i++) {}

### CHECK ###
check (a) {
    is 10:
    is 20:
}

check (direction) {
    is direction.LEFT:
    is direction.STAY:
    is direction.RIGHT:
}

### INCLUDE ###
include "myTest.lib";

### EXPORT ###
export "File.spc";

### CLASS ###
class Obj => {}
class Obj with Object => {}
class Obj extends Base with Object => {}

this::constructor() {}
this::constructor(param1, param2) {}
this::constructor(data:char[]) {}

### ENUM ###
enum Test {
    a : 10,
    b,
    c
}

### FUNCTION CALL ###
test(param1, param2);
test2(param1, *param2);
test3(&param1, param2);
pass(getCurrentVal(), true);

this.getValue();
this.getRGB(x, y);

### RETURN ###
return a + b;
return a;
return 1 + 2 * 3;
return a == 0 ? a : b;
return new Object();

### BREAK ###
break;

### CONTINUE ###
continue;
